#
LSD
Language
Switching
Device

DAYS TILL DUE: bout 18.

To Do:


Strings:
1. If java: String temp = "bla";
   C++:     String temp = __rt::literal("bla");
2. String accessing needs to be like     cout << test->__vptr->toString(test)->data << endl; if test is the string

-YOU CAN "using namespace" on multiple namespaces in the same file and it works!
-Use xtc.tree.printer?
-For each arg[], we process them but do not print once per arg
-If the file we are translating takes system args, we need to handle that in the translated file
-Trouble class for exception handling?
-special case string as an object?
-Use hashmap to map java primative types to c++ types
-Shouldn't have to deal with $ in java
-printing strings and variable types in c++ is different



_V_V_V_V_V_ Current pressing issues _^_^_^_^_^_^_
- Delete needs to be rewritten for each class, not ever inherited
- Need to deal with static blocks in class declarations.
- how to use xtc.util.symbol table to our advantage?
- method overloading
- memset?
- memory management (smart pointers)? to support, we need to change . . .  typedefs! AND each instance of a reference be made to a smart pointer. not that hard.
- chaining -> use temp variables (method chaining, assignment chaining)
- overload '+'
- each class needs a delete method -> add to vtable
- populate lang list*
- deal with arrays in parameters
- arrays of arrays templates



Timeline:
Week 1:
-Test suite
-High level, detailed program structure and plan

Week 2:
-Refactoring

Week 3:
-Refactoring
-Overloading
-Exceptions

Week 4:





===============================================================================
===X=X=X=X=====X=X=X=X=X=X=======PRE-MIDTERM===X=X=X=X=X===X=X=X==X=X=X========
===============================================================================

-Deal with for(o:N) type loops in C++
-Final methods == const?
-change printStringDescendants to visitor methods
-Ask Grimm if we can rely on the same ordering of nodes in AST (ie. is methodsDeclaration)
-Manually do work of printStringDescendants with visitMethods()

-Ask Grimm: When we declare a __Array in our .h, do we need to specify size? NO

-Deal with matrices (arrays of arrays? OF ARRAYS??)
-be observant of use of string/class/object

-remember all classes need a pointer to a vtable
-all methods for the class need to be declared in the vtable
-entry to main method hs input class, but what if methods in other classes
-need a data structure to store dependancies
-what structure will we use for the vtable
-have to figure out how to solve dependancies
-all classes
-c++ needs to deal with ugly castes
-size cannot be known statically

-DONT WORRY ABOUT VISIBILITY

i.get import statements
ii.generate AST for all .java files

1. Build Inheritance Tree
 -Create list of mentioned classes and where it is located.(input for inheritance tree);
 -Create list of "places to look" for possible files
    Q_ SHOULD ALL CLASSES IN IMPORTS BE MADE INTO CLASS STRUCTS,
    OR ONLY THOSE INSTANTIATED IN A METHOD _Q
    A_make ALL the structs!

XX2. Go through input files, create Bubbles for each class declaration
  -these Bubbles contain
        -name
        -methods
        -data fields
        -children
        -parents
            -if parents exsist in list of classes seen, point to it
            -else, create a new class node and later fill it in

3. Construct Vtables using the inheritance tree we just made ^^
    -start at 'Object' and dfs:
        -pass down vtable
        -over-write methods as needed

    --By here, we have Vtables for all classes--

4. Create structs for each class
    -associate data fields

____________________.h is practically finished ______________________

##How we are doing the .cc:##

-Create new class Mubble. It will be a container for all method details
Mubble:
    -class you belong to
    -header of method (in correct format for .cc output)
    -Code

-Create global MubbleList:
For each Bubble:
    For each Method:
        create a mubble for it and add to the list

-now Impl will visit the AST just as decl did and do the following:
    -when you hit a MethodDecl:
        -find which Mubble it corresponds to in MubbleList (check parents etc)
        -set that Mubble as "currentMubble"

    -Hitting Blocks/FieldDecl/etc etc (the code)
        -Add the code in proper format to CurrentMubble.code
        (it may make it easier to keep tempStrings to hold lines of code as they are constructed, then add tempString to MC.code..)

-Once AST is done being processes:
    -Add each Mubble to its respective PNode. (for correct printing with namespace)




V_V_V_V_V___AFTERTHOUGHTS___V_V_V_V_V
-Do we need to deal with Exceptions in our Inheritance Tree
-nested shit... wtf


