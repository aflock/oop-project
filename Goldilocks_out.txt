Java Scope Analyzer, v. 2.1.1, My Group
Processing ../oop-project/Goldilocks.java ...
CompilationUnit(
  null,
  ImportDeclaration(
    null,
    QualifiedIdentifier(
      "java",
      "util",
      "Scanner"
    ),
    null
  ),
  ImportDeclaration(
    null,
    QualifiedIdentifier(
      "java",
      "util"
    ),
    "*"
  ),
  ClassDeclaration(
    Modifiers(
      Modifier(
        "public"
      )
    ),
    "Goldilocks",
    null,
    null,
    null,
    ClassBody(
      MethodDeclaration(
        Modifiers(
          Modifier(
            "public"
          ),
          Modifier(
            "static"
          )
        ),
        null,
        VoidType(),
        "main",
        FormalParameters(
          FormalParameter(
            Modifiers(),
            Type(
              QualifiedIdentifier(
                "String"
              ),
              Dimensions(
                "["
              )
            ),
            null,
            "args",
            null
          )
        ),
        null,
        null,
        Block(
          ExpressionStatement(
            CallExpression(
              SelectionExpression(
                PrimaryIdentifier(
                  "System"
                ),
                "out"
              ),
              null,
              "println",
              Arguments(
                StringLiteral(
                  "\"hello\""
                )
              )
            )
          ),
          FieldDeclaration(
            Modifiers(),
            Type(
              QualifiedIdentifier(
                "Newbie"
              ),
              null
            ),
            Declarators(
              Declarator(
                "Andrew",
                null,
                NewClassExpression(
                  null,
                  null,
                  QualifiedIdentifier(
                    "Newbie"
                  ),
                  Arguments(),
                  null
                )
              )
            )
          ),
          FieldDeclaration(
            Modifiers(),
            Type(
              QualifiedIdentifier(
                "Newbie"
              ),
              null
            ),
            Declarators(
              Declarator(
                "John",
                null,
                NewClassExpression(
                  null,
                  null,
                  QualifiedIdentifier(
                    "Newbie"
                  ),
                  Arguments(),
                  null
                )
              )
            )
          ),
          ExpressionStatement(
            CallExpression(
              SelectionExpression(
                PrimaryIdentifier(
                  "System"
                ),
                "out"
              ),
              null,
              "println",
              Arguments(
                CallExpression(
                  PrimaryIdentifier(
                    "Andrew"
                  ),
                  null,
                  "info",
                  Arguments()
                )
              )
            )
          ),
          ForStatement(
            BasicForControl(
              Modifiers(),
              Type(
                PrimitiveType(
                  "int"
                ),
                null
              ),
              Declarators(
                Declarator(
                  "i",
                  null,
                  IntegerLiteral(
                    "0"
                  )
                )
              ),
              RelationalExpression(
                PrimaryIdentifier(
                  "i"
                ),
                "<",
                IntegerLiteral(
                  "2"
                )
              ),
              ExpressionList(
                PostfixExpression(
                  PrimaryIdentifier(
                    "i"
                  ),
                  "++"
                )
              )
            ),
            Block(
              ConditionalStatement(
                EqualityExpression(
                  PrimaryIdentifier(
                    "i"
                  ),
                  "==",
                  IntegerLiteral(
                    "0"
                  )
                ),
                Block(
                  FieldDeclaration(
                    Modifiers(),
                    Type(
                      QualifiedIdentifier(
                        "String"
                      ),
                      null
                    ),
                    Declarators(
                      Declarator(
                        "theString",
                        null,
                        AdditiveExpression(
                          CallExpression(
                            PrimaryIdentifier(
                              "Andrew"
                            ),
                            null,
                            "info",
                            Arguments()
                          ),
                          "+",
                          PrimaryIdentifier(
                            "i"
                          )
                        )
                      )
                    )
                  ),
                  ExpressionStatement(
                    CallExpression(
                      SelectionExpression(
                        PrimaryIdentifier(
                          "System"
                        ),
                        "out"
                      ),
                      null,
                      "println",
                      Arguments(
                        AdditiveExpression(
                          PrimaryIdentifier(
                            "i"
                          ),
                          "+",
                          PrimaryIdentifier(
                            "theString"
                          )
                        )
                      )
                    )
                  )
                ),
                Block(
                  FieldDeclaration(
                    Modifiers(),
                    Type(
                      QualifiedIdentifier(
                        "String"
                      ),
                      null
                    ),
                    Declarators(
                      Declarator(
                        "theString",
                        null,
                        AdditiveExpression(
                          CallExpression(
                            PrimaryIdentifier(
                              "John"
                            ),
                            null,
                            "info",
                            Arguments()
                          ),
                          "+",
                          PrimaryIdentifier(
                            "i"
                          )
                        )
                      )
                    )
                  ),
                  ExpressionStatement(
                    CallExpression(
                      SelectionExpression(
                        PrimaryIdentifier(
                          "System"
                        ),
                        "out"
                      ),
                      null,
                      "println",
                      Arguments(
                        AdditiveExpression(
                          PrimaryIdentifier(
                            "i"
                          ),
                          "+",
                          PrimaryIdentifier(
                            "theString"
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          ),
          FieldDeclaration(
            Modifiers(),
            Type(
              PrimitiveType(
                "int"
              ),
              null
            ),
            Declarators(
              Declarator(
                "j",
                null,
                IntegerLiteral(
                  "1"
                )
              )
            )
          ),
          WhileStatement(
            EqualityExpression(
              PrimaryIdentifier(
                "j"
              ),
              "==",
              IntegerLiteral(
                "1"
              )
            ),
            Block(
              ExpressionStatement(
                PostfixExpression(
                  PrimaryIdentifier(
                    "j"
                  ),
                  "++"
                )
              ),
              FieldDeclaration(
                Modifiers(),
                Type(
                  PrimitiveType(
                    "int"
                  ),
                  null
                ),
                Declarators(
                  Declarator(
                    "theInt",
                    null,
                    IntegerLiteral(
                      "5"
                    )
                  )
                )
              ),
              ExpressionStatement(
                CallExpression(
                  SelectionExpression(
                    PrimaryIdentifier(
                      "System"
                    ),
                    "out"
                  ),
                  null,
                  "println",
                  Arguments(
                    PrimaryIdentifier(
                      "theInt"
                    )
                  )
                )
              )
            )
          ),
          TryCatchFinallyStatement(
            null,
            Block(
              FieldDeclaration(
                Modifiers(),
                Type(
                  QualifiedIdentifier(
                    "Scanner"
                  ),
                  null
                ),
                Declarators(
                  Declarator(
                    "sc",
                    null,
                    NewClassExpression(
                      null,
                      null,
                      QualifiedIdentifier(
                        "Scanner"
                      ),
                      Arguments(
                        SelectionExpression(
                          PrimaryIdentifier(
                            "System"
                          ),
                          "in"
                        )
                      ),
                      null
                    )
                  )
                )
              ),
              ExpressionStatement(
                CallExpression(
                  SelectionExpression(
                    PrimaryIdentifier(
                      "System"
                    ),
                    "out"
                  ),
                  null,
                  "println",
                  Arguments(
                    CallExpression(
                      PrimaryIdentifier(
                        "sc"
                      ),
                      null,
                      "toString",
                      Arguments()
                    )
                  )
                )
              )
            ),
            CatchClause(
              FormalParameter(
                Modifiers(),
                Type(
                  QualifiedIdentifier(
                    "Exception"
                  ),
                  null
                ),
                null,
                "e",
                null
              ),
              Block(
                ExpressionStatement(
                  CallExpression(
                    SelectionExpression(
                      PrimaryIdentifier(
                        "System"
                      ),
                      "out"
                    ),
                    null,
                    "println",
                    Arguments(
                      PrimaryIdentifier(
                        "e"
                      )
                    )
                  )
                )
              )
            ),
            null
          ),
          ConditionalStatement(
            BooleanLiteral(
              "true"
            ),
            ExpressionStatement(
              CallExpression(
                SelectionExpression(
                  PrimaryIdentifier(
                    "System"
                  ),
                  "out"
                ),
                null,
                "println",
                Arguments(
                  StringLiteral(
                    "\"yay true!\""
                  )
                )
              )
            ),
            null
          ),
          ConditionalStatement(
            BooleanLiteral(
              "true"
            ),
            Block(
              ExpressionStatement(
                CallExpression(
                  SelectionExpression(
                    PrimaryIdentifier(
                      "System"
                    ),
                    "out"
                  ),
                  null,
                  "println",
                  Arguments(
                    StringLiteral(
                      "\"in a block\""
                    )
                  )
                )
              )
            ),
            ExpressionStatement(
              CallExpression(
                SelectionExpression(
                  PrimaryIdentifier(
                    "System"
                  ),
                  "out"
                ),
                null,
                "println",
                Arguments(
                  StringLiteral(
                    "\"yay false!\""
                  )
                )
              )
            )
          ),
          Block(
            FieldDeclaration(
              Modifiers(),
              Type(
                PrimitiveType(
                  "int"
                ),
                null
              ),
              Declarators(
                Declarator(
                  "tryThis",
                  null,
                  IntegerLiteral(
                    "15"
                  )
                )
              )
            ),
            ExpressionStatement(
              CallExpression(
                SelectionExpression(
                  PrimaryIdentifier(
                    "System"
                  ),
                  "out"
                ),
                null,
                "println",
                Arguments(
                  PrimaryIdentifier(
                    "tryThis"
                  )
                )
              )
            )
          ),
          DoWhileStatement(
            ExpressionStatement(
              PostfixExpression(
                PrimaryIdentifier(
                  "j"
                ),
                "++"
              )
            ),
            RelationalExpression(
              PrimaryIdentifier(
                "j"
              ),
              "<",
              IntegerLiteral(
                "4"
              )
            )
          ),
          ExpressionStatement(
            CallExpression(
              SelectionExpression(
                PrimaryIdentifier(
                  "System"
                ),
                "out"
              ),
              null,
              "println",
              Arguments(
                PrimaryIdentifier(
                  "j"
                )
              )
            )
          )
        )
      )
    )
  ),
  ClassDeclaration(
    Modifiers(),
    "Newbie",
    null,
    null,
    null,
    ClassBody(
      FieldDeclaration(
        Modifiers(
          Modifier(
            "private"
          ),
          Modifier(
            "static"
          )
        ),
        Type(
          PrimitiveType(
            "int"
          ),
          null
        ),
        Declarators(
          Declarator(
            "count",
            null,
            IntegerLiteral(
              "0"
            )
          )
        )
      ),
      FieldDeclaration(
        Modifiers(
          Modifier(
            "public"
          )
        ),
        Type(
          PrimitiveType(
            "int"
          ),
          null
        ),
        Declarators(
          Declarator(
            "age",
            null,
            null
          )
        )
      ),
      ConstructorDeclaration(
        Modifiers(
          Modifier(
            "public"
          )
        ),
        null,
        "Newbie",
        FormalParameters(),
        null,
        Block(
          ExpressionStatement(
            PostfixExpression(
              PrimaryIdentifier(
                "count"
              ),
              "++"
            )
          ),
          ExpressionStatement(
            Expression(
              PrimaryIdentifier(
                "age"
              ),
              "=",
              AdditiveExpression(
                PrimaryIdentifier(
                  "count"
                ),
                "+",
                IntegerLiteral(
                  "1"
                )
              )
            )
          ),
          ConditionalStatement(
            RelationalExpression(
              PrimaryIdentifier(
                "age"
              ),
              ">",
              IntegerLiteral(
                "0"
              )
            ),
            ExpressionStatement(
              PostfixExpression(
                PrimaryIdentifier(
                  "count"
                ),
                "--"
              )
            ),
            null
          )
        )
      ),
      MethodDeclaration(
        Modifiers(
          Modifier(
            "public"
          )
        ),
        null,
        Type(
          QualifiedIdentifier(
            "String"
          ),
          null
        ),
        "info",
        FormalParameters(),
        null,
        null,
        Block(
          ReturnStatement(
            AdditiveExpression(
              StringLiteral(
                "\"This Newb\'s age is\""
              ),
              "+",
              SelectionExpression(
                ThisExpression(
                  null
                ),
                "age"
              )
            )
          )
        )
      )
    )
  ),
  ClassDeclaration(
    Modifiers(
      Modifier(
        "abstract"
      )
    ),
    "Pro",
    null,
    null,
    null,
    ClassBody(
      FieldDeclaration(
        Modifiers(),
        Type(
          PrimitiveType(
            "int"
          ),
          null
        ),
        Declarators(
          Declarator(
            "i",
            null,
            null
          )
        )
      )
    )
  )
)
