//(2) processing conditional block expressions
//(7) add new definition
#if (defined C1)
#elif !(defined C1) && (defined C2)
#elif !(defined C1) && !(defined C2)
#endif

//(1) expanding macro to multiple definitions
int x = 
#if (defined C1)
1
#elif !(defined C1) && (defined C2)
2
#elif !(defined C1) && !(defined C2)
3
#endif
;

int y = x * 
#if (defined C1)
1
#elif !(defined C1) && (defined C2)
2
#elif !(defined C1) && !(defined C2)
3
#endif
;

//(3) combine multiple streams
int z = (
#if (defined C3)
1
#endif
#if !(defined C3) && (defined C4)
2
#endif
#if !(defined C3) && !(defined C4)
3
#endif
)*(
#if (defined C3)
1
#endif
#if !(defined C3) && (defined C4)
2
#endif
#if !(defined C3) && !(defined C4)
3
#endif
)
#if (defined C3)
#if (defined C3)
#elif !(defined C3) && (defined C4)
#elif 0
#elif !(defined C3) && !(defined C4)
#elif 0
#endif
#endif
;

//(4) expand function to multiple definitions
#if (defined C5)
#elif !(defined C5) && (defined C6)
#elif !(defined C5) && !(defined C6)
#endif

#if (defined C5)
f1(1)
#elif !(defined C5) && (defined C6)
f2(1)
#elif !(defined C5) && !(defined C6)
f3(1)
#endif
;

//(5) compute guard condition
//(10) rectify self-guarding condition
#if 1
int header() {
  return 0;
}

#endif
#if (defined C8)
#elif !(defined C8) && (defined C9)
#endif
