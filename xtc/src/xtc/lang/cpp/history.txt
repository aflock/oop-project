[2.1 RELEASE]

2011/09/06

Summary of remaining preprocessor regression test issues:

1) Handling #include that interrupts a function-like macro invocation.

2) Handling conditionals that interrupt function-like macro
invocations in strange ways.  Hoisting is buggy.

3) Interaction of hoisting function-like macro invocations and
token-pasting.

4) Hoisting function-like macro in two tests results in one branch
being #elif 0.

5) Parsing function-like macros when parentheses come from macro
expansions.

6) Lexing \n (escape sequences) that are not in quotes.

7) Implement #pragma once.


function_parsing.c - During function-like macro invocation hoisting,
the #endif after the closing paren is not reached, since the
conditional is "#if 1".  Need to ensure complete conditionals are
gathered during hoisting.

Fixed issue with @ and $ symbols in the lexer (token_pasting_invalid.c).

Removed regression test that was a massive chunk of linux code
(assert_spin_locked.c).

2011/09/05

Reverted changes to parser main loop so that regression tests work
again.

Reverted preprocessor fixes for regression that were breaking linux
tests.  (But still need to fix regression tests.)

2011/08/**

Formatted most .java files according to java coding and commenting
standards.

Elaborated on and cleaned up style of comments, especially in
preprocessor.

(Make sure this was not undone.) In preprocessor output, now print
space before tokens with a PREV_WHITE flag.  This ensures proper
spacing when using SuperC -E.

(This broken linux tests, so I undid it.)  Fixed bug in function-like
macro invocation, where define/undef directives were no longer being
evaluated in invocations.  Now they are.  For an example, see
($CPPTEST/cpp/function_arguments_directives.c).
