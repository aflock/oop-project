/* The following code was generated by JFlex 1.4.3 on 9/7/11 9:38 AM */

package xtc.lang.cpp;
import xtc.lang.cpp.CSyntax.Token;
import xtc.lang.cpp.CSyntax.ValuedToken;
import xtc.lang.cpp.CSyntax.Keyword;
import xtc.lang.cpp.CSyntax.Identifier;
import xtc.lang.cpp.CSyntax.Literal;
import xtc.lang.cpp.CSyntax.Punctuation;
import xtc.lang.cpp.CSyntax.Layout;

import xtc.lang.cpp.ForkMergeParserTables.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/7/11 9:38 AM from the specification file
 * <tt>c.l</tt>
 */
class CLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\31\1\26\1\31\1\31\1\32\22\0\1\31\1\65\1\30"+
    "\1\76\1\106\1\71\1\66\1\27\1\73\1\74\1\70\1\5\1\75"+
    "\1\61\1\6\1\33\1\2\7\15\2\14\1\104\1\105\1\63\1\64"+
    "\1\62\1\20\1\106\1\17\1\57\1\60\1\17\1\3\1\7\5\1"+
    "\1\11\3\1\1\4\4\1\1\13\2\1\1\16\2\1\1\101\1\25"+
    "\1\102\1\72\1\56\1\0\1\34\1\23\1\42\1\47\1\40\1\22"+
    "\1\51\1\44\1\46\1\1\1\41\1\12\1\50\1\45\1\36\1\55"+
    "\1\1\1\37\1\43\1\35\1\10\1\21\1\53\1\24\1\54\1\52"+
    "\1\77\1\67\1\100\1\103\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\3\1\1\5\1\6"+
    "\3\1\1\0\1\7\2\0\1\10\1\11\13\1\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\40"+
    "\1\42\1\2\1\42\1\43\4\2\2\42\1\44\1\45"+
    "\1\0\2\1\4\5\4\1\1\0\1\7\4\0\1\46"+
    "\1\0\1\47\1\50\16\1\1\51\1\1\1\52\6\1"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\42\1\43\1\0\1\43\4\2\2\75"+
    "\1\76\3\1\4\5\3\1\1\77\1\1\1\100\2\0"+
    "\1\1\1\101\21\1\1\102\20\1\1\103\1\104\1\0"+
    "\4\75\2\1\1\105\1\1\1\106\2\1\1\107\4\1"+
    "\1\110\1\1\1\111\1\112\2\1\1\113\11\1\1\114"+
    "\20\1\4\75\1\1\1\115\1\1\1\116\1\117\7\1"+
    "\1\120\2\1\1\121\6\1\1\122\5\1\1\123\10\1"+
    "\1\124\3\1\1\125\1\1\1\126\2\1\1\127\1\1"+
    "\1\130\1\131\1\132\1\133\1\134\1\135\1\136\22\1"+
    "\1\137\3\1\1\140\5\1\1\141\4\1\1\142\4\1"+
    "\1\143\1\144\1\145\1\146\1\147\5\1\1\150\1\151"+
    "\4\1\1\152\1\153\1\154\1\155\2\1\1\156\4\1"+
    "\1\157\3\1\1\160\3\1\1\161\1\162\2\1\1\163"+
    "\1\164\4\1\1\165\1\166\2\1\1\167\1\170\4\1"+
    "\1\171\4\1\1\172\1\173\11\1\1\174\2\1\1\175"+
    "\3\1\1\176\11\1\1\177";

  private static int [] zzUnpackAction() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899"+
    "\0\u08e0\0\u0927\0\u096e\0\u09b5\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1"+
    "\0\u0b18\0\u02c6\0\u02c6\0\u02c6\0\u0b5f\0\u02c6\0\u02c6\0\u02c6"+
    "\0\u02c6\0\u02c6\0\u02c6\0\u02c6\0\u02c6\0\u0ba6\0\u02c6\0\u0bed"+
    "\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\u0e25"+
    "\0\u0e6c\0\u0eb3\0\u02c6\0\u02c6\0\u0efa\0\u0f41\0\u0f88\0\u0fcf"+
    "\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179\0\u11c0\0\u1207"+
    "\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u02c6\0\u13b1\0\u02c6"+
    "\0\u02c6\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2"+
    "\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c\0\u1793\0\216"+
    "\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb"+
    "\0\u02c6\0\u02c6\0\u02c6\0\u1a12\0\u02c6\0\u1a59\0\u02c6\0\u02c6"+
    "\0\u02c6\0\u02c6\0\u02c6\0\u02c6\0\u02c6\0\u02c6\0\u02c6\0\u02c6"+
    "\0\u02c6\0\u02c6\0\u1aa0\0\u1ae7\0\u1b2e\0\u0c34\0\u0c34\0\u1b75"+
    "\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u02c6\0\u1cd8\0\u1d1f\0\u1d66"+
    "\0\u0c34\0\u1dad\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\216"+
    "\0\u1f57\0\u02c6\0\u1f9e\0\u1fe5\0\u202c\0\216\0\u2073\0\u20ba"+
    "\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264\0\u22ab\0\u22f2"+
    "\0\u2339\0\u2380\0\u23c7\0\u240e\0\u2455\0\u249c\0\u24e3\0\216"+
    "\0\u252a\0\u2571\0\u25b8\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b"+
    "\0\u2762\0\u27a9\0\u27f0\0\u2837\0\u287e\0\u28c5\0\u290c\0\u2953"+
    "\0\u02c6\0\u02c6\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd"+
    "\0\u2b44\0\216\0\u2b8b\0\216\0\u2bd2\0\u2c19\0\216\0\u2c60"+
    "\0\u2ca7\0\u2cee\0\u2d35\0\216\0\u2d7c\0\216\0\216\0\u2dc3"+
    "\0\u2e0a\0\216\0\u2e51\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4"+
    "\0\u2ffb\0\u3042\0\u3089\0\216\0\u30d0\0\u3117\0\u315e\0\u31a5"+
    "\0\u31ec\0\u3233\0\u327a\0\u32c1\0\u3308\0\u334f\0\u3396\0\u33dd"+
    "\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u0c34\0\u3540\0\u3587\0\u35ce"+
    "\0\u3615\0\216\0\u365c\0\216\0\216\0\u36a3\0\u36ea\0\u3731"+
    "\0\u3778\0\u37bf\0\u3806\0\u384d\0\216\0\u3894\0\u38db\0\216"+
    "\0\u3922\0\u3969\0\u39b0\0\u39f7\0\u3a3e\0\u3a85\0\216\0\u3acc"+
    "\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f\0\u3c76\0\u3cbd\0\u3d04"+
    "\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20\0\u3e67\0\216\0\u3eae\0\u3ef5"+
    "\0\u3f3c\0\216\0\u3f83\0\216\0\u3fca\0\u4011\0\216\0\u4058"+
    "\0\216\0\216\0\216\0\216\0\216\0\216\0\216\0\u409f"+
    "\0\u40e6\0\u412d\0\u4174\0\u41bb\0\u4202\0\u4249\0\u4290\0\u42d7"+
    "\0\u431e\0\u4365\0\u43ac\0\u43f3\0\u443a\0\u4481\0\u44c8\0\u450f"+
    "\0\u4556\0\216\0\u459d\0\u45e4\0\u462b\0\216\0\u4672\0\u46b9"+
    "\0\u4700\0\u4747\0\u478e\0\216\0\u47d5\0\u481c\0\u4863\0\u48aa"+
    "\0\u48f1\0\u4938\0\u497f\0\u49c6\0\u4a0d\0\216\0\216\0\216"+
    "\0\216\0\216\0\u4a54\0\u4a9b\0\u4ae2\0\u4b29\0\u4b70\0\216"+
    "\0\u4bb7\0\u4bfe\0\u4c45\0\u4c8c\0\u4cd3\0\u4d1a\0\u4d61\0\216"+
    "\0\216\0\u4da8\0\u4def\0\u4e36\0\u4e7d\0\u4ec4\0\u4f0b\0\u4f52"+
    "\0\216\0\u4f99\0\u4fe0\0\u5027\0\u506e\0\u50b5\0\u50fc\0\u5143"+
    "\0\216\0\u518a\0\u51d1\0\u5218\0\216\0\216\0\u525f\0\u52a6"+
    "\0\u52ed\0\u5334\0\216\0\u537b\0\u53c2\0\u5409\0\216\0\216"+
    "\0\u5450\0\u5497\0\u54de\0\u5525\0\216\0\u556c\0\u55b3\0\u55fa"+
    "\0\u5641\0\216\0\216\0\u5688\0\u56cf\0\u5716\0\u575d\0\u57a4"+
    "\0\u57eb\0\u5832\0\u5879\0\u58c0\0\216\0\u5907\0\u594e\0\216"+
    "\0\u5995\0\u59dc\0\u5a23\0\216\0\u5a6a\0\u5ab1\0\u5af8\0\u5b3f"+
    "\0\u5b86\0\u5bcd\0\u5c14\0\u5c5b\0\u5ca2\0\216";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\1\4\2\3\1\5\1\6\1\3\1\7"+
    "\1\10\1\11\1\3\2\12\2\3\1\13\1\14\1\15"+
    "\1\16\1\3\1\17\1\20\1\21\1\22\2\23\1\24"+
    "\1\25\1\26\1\3\1\27\1\30\1\3\1\31\1\32"+
    "\2\3\1\33\1\34\1\3\1\35\1\3\1\36\2\3"+
    "\1\37\2\3\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\26\66\1\67\41\66\1\70\16\66\1\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\25\3\27\0\1\71\1\72"+
    "\2\73\1\0\1\74\1\71\1\75\1\76\1\77\1\100"+
    "\1\101\1\72\1\102\1\71\1\0\3\71\1\102\7\0"+
    "\4\71\1\73\14\71\1\73\3\71\33\0\1\103\56\0"+
    "\1\104\24\0\1\74\3\0\1\105\5\0\2\74\72\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\11\3\1\106"+
    "\13\3\27\0\4\3\2\0\11\3\1\0\4\3\2\0"+
    "\1\21\1\22\3\0\25\3\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\2\3\1\107\22\3\27\0\1\71"+
    "\1\12\2\73\1\0\1\74\1\71\1\110\1\111\1\112"+
    "\1\113\2\12\2\71\1\0\4\71\7\0\4\71\1\73"+
    "\14\71\1\73\3\71\136\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\2\3\1\114\22\3\27\0\4\3\2\0"+
    "\3\3\1\115\5\3\1\0\4\3\7\0\2\3\1\116"+
    "\22\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\3\3\1\117\21\3\54\0\1\23\105\0\1\120\1\20"+
    "\2\0\1\121\1\20\1\122\53\0\25\123\1\124\2\0"+
    "\57\123\25\22\1\125\1\0\1\22\1\126\56\22\25\0"+
    "\1\17\1\20\2\0\2\23\1\122\106\0\1\127\30\0"+
    "\1\130\3\0\1\131\17\0\4\3\2\0\1\3\1\132"+
    "\7\3\1\0\4\3\7\0\7\3\1\133\15\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\20\3\1\134"+
    "\4\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\4\3\1\135\20\3\27\0\4\3\2\0\3\3\1\136"+
    "\5\3\1\0\3\3\1\137\7\0\11\3\1\140\13\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\1\141"+
    "\1\3\1\142\5\3\1\143\14\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\1\3\1\144\6\3\1\145"+
    "\1\3\1\146\4\3\1\147\5\3\27\0\4\3\2\0"+
    "\11\3\1\0\1\3\1\150\2\3\7\0\11\3\1\151"+
    "\13\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\2\3\1\152\1\3\1\153\20\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\2\3\1\154\22\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\10\3\1\155"+
    "\14\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\22\3\1\156\1\157\1\160\107\0\1\161\1\162\1\0"+
    "\1\163\104\0\1\164\1\0\1\165\105\0\1\166\1\167"+
    "\106\0\1\170\106\0\1\171\106\0\1\172\1\0\1\173"+
    "\104\0\1\174\2\0\1\175\103\0\1\176\106\0\1\177"+
    "\106\0\1\200\120\0\1\201\10\0\26\66\1\0\41\66"+
    "\1\0\16\66\33\0\1\202\54\0\2\71\2\203\1\0"+
    "\12\71\1\0\4\71\7\0\4\71\1\203\14\71\1\203"+
    "\3\71\27\0\1\71\1\72\2\73\1\0\1\74\1\71"+
    "\1\75\1\76\1\77\1\100\1\101\1\72\2\71\1\0"+
    "\4\71\7\0\4\71\1\73\14\71\1\73\3\71\27\0"+
    "\1\71\1\204\2\203\1\205\6\71\2\204\2\71\1\0"+
    "\4\71\7\0\4\71\1\203\14\71\1\203\3\71\1\205"+
    "\26\0\1\71\1\74\2\73\1\0\1\71\1\206\1\71"+
    "\2\206\1\71\2\74\2\71\1\0\1\71\1\206\2\71"+
    "\7\0\4\71\1\73\14\71\1\73\3\71\27\0\2\71"+
    "\2\203\1\0\2\71\1\207\1\210\1\211\5\71\1\0"+
    "\4\71\7\0\4\71\1\203\14\71\1\203\3\71\27\0"+
    "\2\71\2\203\1\0\2\71\1\207\1\212\1\71\1\207"+
    "\4\71\1\0\4\71\7\0\4\71\1\203\14\71\1\203"+
    "\3\71\27\0\2\71\2\203\1\0\2\71\1\207\1\71"+
    "\1\212\1\207\4\71\1\0\4\71\7\0\4\71\1\203"+
    "\14\71\1\203\3\71\27\0\2\71\2\203\1\0\3\71"+
    "\1\210\1\211\1\207\4\71\1\0\4\71\7\0\4\71"+
    "\1\203\14\71\1\203\3\71\27\0\1\71\1\101\2\73"+
    "\1\0\1\74\5\71\2\101\2\71\1\0\4\71\7\0"+
    "\4\71\1\73\14\71\1\73\3\71\27\0\1\71\1\213"+
    "\1\214\1\203\1\0\1\71\1\213\4\71\2\213\1\71"+
    "\1\213\1\0\1\71\2\213\1\71\7\0\1\213\3\71"+
    "\1\214\1\71\1\213\4\71\1\213\5\71\1\203\1\71"+
    "\2\213\34\0\1\215\101\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\7\3\1\216\2\3\1\217\12\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\11\3\1\220"+
    "\13\3\27\0\2\71\2\203\1\0\2\71\1\221\1\222"+
    "\1\223\5\71\1\0\4\71\7\0\4\71\1\203\14\71"+
    "\1\203\3\71\27\0\2\71\2\203\1\0\2\71\1\221"+
    "\1\224\1\71\1\221\4\71\1\0\4\71\7\0\4\71"+
    "\1\203\14\71\1\203\3\71\27\0\2\71\2\203\1\0"+
    "\2\71\1\221\1\71\1\224\1\221\4\71\1\0\4\71"+
    "\7\0\4\71\1\203\14\71\1\203\3\71\27\0\2\71"+
    "\2\203\1\0\3\71\1\222\1\223\1\221\4\71\1\0"+
    "\4\71\7\0\4\71\1\203\14\71\1\203\3\71\27\0"+
    "\4\3\2\0\3\3\1\225\5\3\1\0\4\3\7\0"+
    "\12\3\1\226\12\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\2\3\1\227\22\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\3\3\1\230\21\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\4\3\1\231"+
    "\20\3\54\0\1\121\105\0\1\120\3\0\2\121\107\0"+
    "\1\127\53\0\25\123\1\124\1\0\1\232\57\123\2\0"+
    "\1\123\12\0\1\123\2\0\4\123\1\233\1\123\1\0"+
    "\2\123\3\0\2\123\1\0\1\123\5\0\1\123\43\0"+
    "\1\22\12\0\1\22\2\0\4\22\1\234\1\22\1\0"+
    "\2\22\3\0\2\22\1\0\1\22\5\0\1\22\41\0"+
    "\26\127\1\20\3\127\1\20\54\127\1\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\1\3\1\235\23\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\14\3\1\236"+
    "\10\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\21\3\1\237\3\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\1\3\1\240\5\3\1\241\5\3\1\242"+
    "\7\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\7\3\1\243\15\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\1\3\1\244\23\3\27\0\4\3\2\0"+
    "\1\3\1\245\7\3\1\0\4\3\7\0\25\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\7\3\1\246"+
    "\15\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\11\3\1\247\13\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\1\250\24\3\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\1\251\2\3\1\252\21\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\2\3\1\253"+
    "\22\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\15\3\1\254\1\255\6\3\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\12\3\1\256\12\3\27\0\4\3"+
    "\2\0\3\3\1\257\5\3\1\0\4\3\7\0\1\3"+
    "\1\260\23\3\27\0\4\3\2\0\1\3\1\261\7\3"+
    "\1\0\4\3\7\0\25\3\27\0\4\3\2\0\11\3"+
    "\1\0\1\3\1\262\2\3\7\0\25\3\27\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\1\3\1\263\23\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\12\3"+
    "\1\264\12\3\27\0\4\3\2\0\3\3\1\265\5\3"+
    "\1\0\1\266\1\3\1\267\1\3\7\0\1\270\1\271"+
    "\1\3\1\272\1\273\1\3\1\274\1\275\2\3\1\276"+
    "\12\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\2\3\1\277\22\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\2\3\1\300\22\3\112\0\1\301\106\0"+
    "\1\302\23\0\2\71\2\203\1\303\12\71\1\0\4\71"+
    "\7\0\4\71\1\203\14\71\1\203\3\71\1\303\26\0"+
    "\1\71\1\204\2\203\1\0\1\71\1\206\1\71\2\206"+
    "\1\71\2\204\2\71\1\0\1\71\1\206\2\71\7\0"+
    "\4\71\1\203\14\71\1\203\3\71\30\0\1\204\11\0"+
    "\2\204\72\0\2\71\2\203\1\0\3\71\1\207\6\71"+
    "\1\0\4\71\7\0\4\71\1\203\14\71\1\203\3\71"+
    "\27\0\2\71\2\203\1\0\4\71\1\207\5\71\1\0"+
    "\4\71\7\0\4\71\1\203\14\71\1\203\3\71\27\0"+
    "\2\71\2\203\1\0\2\71\1\207\2\71\1\207\4\71"+
    "\1\0\4\71\7\0\4\71\1\203\14\71\1\203\3\71"+
    "\27\0\1\71\1\213\1\214\1\203\1\0\1\71\1\213"+
    "\1\304\1\305\1\306\1\307\2\213\1\71\1\213\1\0"+
    "\1\71\2\213\1\71\7\0\1\213\3\71\1\214\1\71"+
    "\1\213\4\71\1\213\5\71\1\203\1\71\2\213\27\0"+
    "\1\71\1\213\1\214\1\203\1\303\1\71\1\213\1\304"+
    "\1\305\1\306\1\307\2\213\1\71\1\213\1\0\1\71"+
    "\2\213\1\71\7\0\1\213\3\71\1\214\1\71\1\213"+
    "\4\71\1\213\5\71\1\203\1\71\2\213\1\303\26\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\12\3\1\310"+
    "\12\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\2\3\1\311\22\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\15\3\1\312\7\3\27\0\2\71\2\203"+
    "\1\0\3\71\1\221\6\71\1\0\4\71\7\0\4\71"+
    "\1\203\14\71\1\203\3\71\27\0\2\71\2\203\1\0"+
    "\4\71\1\221\5\71\1\0\4\71\7\0\4\71\1\203"+
    "\14\71\1\203\3\71\27\0\2\71\2\203\1\0\2\71"+
    "\1\221\2\71\1\221\4\71\1\0\4\71\7\0\4\71"+
    "\1\203\14\71\1\203\3\71\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\1\313\24\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\13\3\1\314\11\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\1\315\24\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\1\316"+
    "\24\3\30\0\2\123\3\0\1\123\4\0\2\123\1\0"+
    "\1\123\2\0\2\123\10\0\1\123\3\0\1\123\1\0"+
    "\1\123\4\0\1\123\7\0\2\123\30\0\2\22\3\0"+
    "\1\22\4\0\2\22\1\0\1\22\2\0\2\22\10\0"+
    "\1\22\3\0\1\22\1\0\1\22\4\0\1\22\7\0"+
    "\2\22\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\2\3\1\317\22\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\4\3\1\320\20\3\27\0\4\3\2\0"+
    "\1\3\1\321\7\3\1\0\4\3\7\0\25\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\1\3\1\322"+
    "\23\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\12\3\1\323\12\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\4\3\1\324\20\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\4\3\1\325\20\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\14\3\1\326"+
    "\10\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\4\3\1\327\20\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\1\3\1\330\5\3\1\331\15\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\3\3\1\332"+
    "\21\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\1\3\1\333\23\3\27\0\4\3\2\0\1\3\1\334"+
    "\7\3\1\0\4\3\7\0\25\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\3\3\1\335\21\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\11\3\1\336"+
    "\13\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\4\3\1\337\20\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\1\3\1\340\23\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\12\3\1\341\12\3\27\0"+
    "\4\3\2\0\11\3\1\0\2\3\1\342\1\3\7\0"+
    "\25\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\1\343\24\3\27\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\2\3\1\344\22\3\27\0\4\3\2\0\3\3"+
    "\1\345\5\3\1\0\4\3\7\0\25\3\27\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\1\346\24\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\2\3\1\347"+
    "\22\3\27\0\4\3\2\0\1\3\1\350\7\3\1\0"+
    "\4\3\7\0\25\3\27\0\4\3\2\0\3\3\1\351"+
    "\5\3\1\0\4\3\7\0\1\3\1\352\5\3\1\353"+
    "\15\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\10\3\1\354\7\3\1\355\4\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\4\3\1\356\20\3\27\0"+
    "\4\3\2\0\11\3\1\0\3\3\1\357\7\0\25\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\2\3"+
    "\1\360\22\3\27\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\12\3\1\361\12\3\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\11\3\1\362\13\3\27\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\2\3\1\363\22\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\14\3"+
    "\1\364\10\3\30\0\1\71\11\0\2\71\72\0\2\71"+
    "\2\203\1\0\2\71\1\365\1\366\1\367\5\71\1\0"+
    "\4\71\7\0\4\71\1\203\14\71\1\203\3\71\27\0"+
    "\2\71\2\203\1\0\2\71\1\365\1\370\1\71\1\365"+
    "\4\71\1\0\4\71\7\0\4\71\1\203\14\71\1\203"+
    "\3\71\27\0\2\71\2\203\1\0\2\71\1\365\1\71"+
    "\1\370\1\365\4\71\1\0\4\71\7\0\4\71\1\203"+
    "\14\71\1\203\3\71\27\0\2\71\2\203\1\0\3\71"+
    "\1\366\1\367\1\365\4\71\1\0\4\71\7\0\4\71"+
    "\1\203\14\71\1\203\3\71\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\15\3\1\371\7\3\27\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\11\3\1\372\13\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\1\3"+
    "\1\373\23\3\27\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\1\3\1\374\23\3\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\5\3\1\375\17\3\27\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\2\3\1\376\10\3"+
    "\1\377\11\3\27\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\3\3\1\u0100\21\3\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\3\3\1\u0101\21\3\27\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\7\3\1\u0102\15\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\3\3"+
    "\1\u0103\21\3\27\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\12\3\1\u0104\12\3\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\1\3\1\u0105\23\3\27\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\12\3\1\u0106\12\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\6\3"+
    "\1\u0107\16\3\27\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\1\3\1\u0108\23\3\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\4\3\1\u0109\20\3\27\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\2\3\1\u010a\22\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\6\3"+
    "\1\u010b\16\3\27\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\11\3\1\u010c\13\3\27\0\4\3\2\0\3\3"+
    "\1\u010d\5\3\1\0\4\3\7\0\25\3\27\0\4\3"+
    "\2\0\1\3\1\u010e\7\3\1\0\4\3\7\0\25\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\4\3"+
    "\1\u010f\20\3\27\0\4\3\2\0\11\3\1\0\2\3"+
    "\1\u0110\1\3\7\0\25\3\27\0\4\3\2\0\3\3"+
    "\1\u0111\5\3\1\0\4\3\7\0\25\3\27\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\12\3\1\u0112\12\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\12\3"+
    "\1\u0113\12\3\27\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\1\3\1\u0114\23\3\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\14\3\1\u0115\10\3\27\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\3\3\1\u0116\21\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\21\3"+
    "\1\u0117\3\3\27\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\7\3\1\u0118\15\3\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\1\3\1\u0119\23\3\27\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\11\3\1\u011a\2\3"+
    "\1\u011b\10\3\27\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\15\3\1\u011c\7\3\27\0\4\3\2\0\3\3"+
    "\1\u011d\5\3\1\0\4\3\7\0\25\3\27\0\4\3"+
    "\2\0\3\3\1\u011e\5\3\1\0\4\3\7\0\25\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\21\3"+
    "\1\u011f\3\3\27\0\2\71\2\203\1\0\3\71\1\365"+
    "\6\71\1\0\4\71\7\0\4\71\1\203\14\71\1\203"+
    "\3\71\27\0\2\71\2\203\1\0\4\71\1\365\5\71"+
    "\1\0\4\71\7\0\4\71\1\203\14\71\1\203\3\71"+
    "\27\0\2\71\2\203\1\0\2\71\1\365\2\71\1\365"+
    "\4\71\1\0\4\71\7\0\4\71\1\203\14\71\1\203"+
    "\3\71\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\11\3\1\u0120\13\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\12\3\1\u0121\12\3\27\0\4\3\2\0"+
    "\11\3\1\0\1\3\1\u0122\2\3\7\0\25\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\4\3\1\u0123"+
    "\20\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\11\3\1\u0124\13\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\12\3\1\u0125\12\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\1\3\1\u0126\23\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\11\3\1\u0127"+
    "\13\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\11\3\1\u0128\13\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\6\3\1\u0129\16\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\1\3\1\u012a\23\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\13\3\1\u012b"+
    "\11\3\27\0\4\3\2\0\11\3\1\0\1\3\1\u012c"+
    "\2\3\7\0\25\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\10\3\1\u012d\14\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\4\3\1\u012e\20\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\4\3\1\u012f"+
    "\20\3\27\0\4\3\2\0\3\3\1\u0130\5\3\1\0"+
    "\4\3\7\0\25\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\4\3\1\u0131\20\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\1\u0132\24\3\27\0\4\3"+
    "\2\0\3\3\1\u0133\5\3\1\0\4\3\7\0\25\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\15\3"+
    "\1\u0134\7\3\27\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\3\3\1\u0135\21\3\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\22\3\1\u0136\2\3\27\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\4\3\1\u0137\20\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\4\3"+
    "\1\u0138\20\3\27\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\1\3\1\u0139\23\3\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\4\3\1\u013a\20\3\27\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\7\3\1\u013b\15\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\21\3"+
    "\1\u013c\3\3\27\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\11\3\1\u013d\13\3\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\12\3\1\u013e\12\3\27\0\4\3"+
    "\2\0\3\3\1\u013f\5\3\1\0\4\3\7\0\25\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\4\3"+
    "\1\u0140\20\3\27\0\4\3\2\0\3\3\1\u0141\5\3"+
    "\1\0\4\3\7\0\25\3\27\0\4\3\2\0\11\3"+
    "\1\0\1\3\1\u0142\2\3\7\0\25\3\27\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\6\3\1\u0143\16\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\4\3"+
    "\1\u0144\20\3\27\0\4\3\2\0\1\3\1\u0145\7\3"+
    "\1\0\4\3\7\0\25\3\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\1\3\1\u0146\23\3\27\0\4\3"+
    "\2\0\3\3\1\u0147\5\3\1\0\4\3\7\0\25\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\1\3"+
    "\1\u0148\23\3\27\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\1\3\1\u0149\23\3\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\11\3\1\u014a\13\3\27\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\12\3\1\u014b\12\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\22\3"+
    "\1\u014c\2\3\27\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\1\u014d\24\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\2\3\1\u014e\22\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\3\3\1\u014f\21\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\11\3\1\u0150"+
    "\13\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\1\3\1\u0151\23\3\27\0\4\3\2\0\3\3\1\u0152"+
    "\5\3\1\0\4\3\7\0\25\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\4\3\1\u0153\20\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\11\3\1\u0154"+
    "\13\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\4\3\1\u0155\20\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\13\3\1\u0156\11\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\4\3\1\u0157\20\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\1\3\1\u0158"+
    "\23\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\3\3\1\u0159\21\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\4\3\1\u015a\20\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\22\3\1\u015b\2\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\12\3\1\u015c"+
    "\12\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\12\3\1\u015d\12\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\2\3\1\u015e\22\3\27\0\4\3\2\0"+
    "\11\3\1\0\2\3\1\u015f\1\3\7\0\25\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\13\3\1\u0160"+
    "\11\3\27\0\4\3\2\0\11\3\1\0\1\3\1\u0161"+
    "\2\3\7\0\25\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\12\3\1\u0162\12\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\7\3\1\u0163\15\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\22\3\1\u0164"+
    "\2\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\4\3\1\u0165\20\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\13\3\1\u0166\11\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\4\3\1\u0167\20\3\27\0"+
    "\4\3\2\0\11\3\1\0\3\3\1\u0168\7\0\25\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\22\3"+
    "\1\u0169\2\3\27\0\4\3\2\0\3\3\1\u016a\5\3"+
    "\1\0\4\3\7\0\25\3\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\11\3\1\u016b\13\3\27\0\4\3"+
    "\2\0\11\3\1\0\1\3\1\u016c\2\3\7\0\25\3"+
    "\27\0\4\3\2\0\1\3\1\u016d\7\3\1\0\4\3"+
    "\7\0\25\3\27\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\22\3\1\u016e\2\3\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\6\3\1\u016f\16\3\27\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\12\3\1\u0170\12\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\22\3"+
    "\1\u0171\2\3\27\0\4\3\2\0\11\3\1\0\3\3"+
    "\1\u0172\7\0\25\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\22\3\1\u0173\2\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\22\3\1\u0174\2\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\4\3\1\u0175"+
    "\20\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\22\3\1\u0176\2\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\22\3\1\u0177\2\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\1\3\1\u0178\23\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\22\3\1\u0179"+
    "\2\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\1\3\1\u017a\23\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\2\3\1\u017b\22\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\22\3\1\u017c\2\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\22\3\1\u017d"+
    "\2\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\22\3\1\u017e\2\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\22\3\1\u017f\2\3\27\0\4\3\2\0"+
    "\11\3\1\0\1\u0180\3\3\7\0\1\3\1\u0181\1\u0182"+
    "\22\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\22\3\1\u0183\2\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\4\3\1\u0184\20\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\22\3\1\u0185\2\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\11\3\1\u0186"+
    "\13\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\22\3\1\u0187\2\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\22\3\1\u0188\2\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\1\u0189\24\3\27\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\20\3\1\u018a\4\3"+
    "\27\0\4\3\2\0\11\3\1\0\1\3\1\u018b\2\3"+
    "\7\0\25\3\27\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\22\3\1\u018c\2\3\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\22\3\1\u018d\2\3\27\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\22\3\1\u018e\2\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\22\3"+
    "\1\u018f\2\3\27\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\21\3\1\u0190\3\3\27\0\4\3\2\0\11\3"+
    "\1\0\1\3\1\u0191\2\3\7\0\25\3\27\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\22\3\1\u0192\2\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\22\3"+
    "\1\u0193\2\3\27\0\4\3\2\0\3\3\1\u0194\5\3"+
    "\1\0\4\3\7\0\1\u0195\24\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\4\3\1\u0196\20\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\7\3\1\u0197"+
    "\15\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\12\3\1\u0198\12\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\3\3\1\u0199\21\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\7\3\1\u019a\15\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\4\3\1\u019b"+
    "\20\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\7\3\1\u019c\15\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\15\3\1\u019d\7\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\22\3\1\u019e\2\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\1\3\1\u019f"+
    "\23\3\27\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\1\3\1\u01a0\23\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\6\3\1\u01a1\16\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\2\3\1\u01a2\22\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\2\3\1\u01a3"+
    "\22\3\27\0\4\3\2\0\11\3\1\0\1\3\1\u01a4"+
    "\2\3\7\0\25\3\27\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\14\3\1\u01a5\10\3\27\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\21\3\1\u01a6\3\3\27\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\1\u01a7\24\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\1\3"+
    "\1\u01a8\23\3\27\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\12\3\1\u01a9\12\3\27\0\4\3\2\0\11\3"+
    "\1\0\2\3\1\u01aa\1\3\7\0\25\3\27\0\4\3"+
    "\2\0\3\3\1\u01ab\5\3\1\0\4\3\7\0\25\3"+
    "\27\0\4\3\2\0\11\3\1\0\4\3\7\0\4\3"+
    "\1\u01ac\20\3\27\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\22\3\1\u01ad\2\3\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\21\3\1\u01ae\3\3\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23785];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\10\1\1\11\3\1\1\0\1\1\2\0\27\1"+
    "\3\11\1\1\10\11\1\1\1\11\13\1\2\11\1\0"+
    "\12\1\1\0\1\1\4\0\1\11\1\0\2\11\27\1"+
    "\3\11\1\1\1\11\1\1\14\11\2\1\1\0\7\1"+
    "\1\11\14\1\1\11\2\0\44\1\2\11\1\0\353\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  private StringBuilder comment = null;
  private boolean commentnl = false;

  private static final String errorMsg[] = {
    "Error: Unmatched end-of-comment punctuation.",
    "Error: Unmatched start-of-comment punctuation.",
    "Error: Unclosed string.",
    "Error: Illegal character."
    };
  
  public static final int E_ENDCOMMENT = 0; 
  public static final int E_STARTCOMMENT = 1; 
  public static final int E_UNCLOSEDSTR = 2; 
  public static final int E_UNMATCHED = 3; 
  
  public static void error(int code) {
    System.out.println(errorMsg[code]);
  }

  /** Convert a syntactic unit to a string. */
  public static String getString(CSyntax syntax) {
    if (syntax.hasValue()) {
      return syntax.getValue();
    }
    else if (syntax.isToken()) {
      switch(((Token) syntax).type()) {
        case AUTO:
          return "auto";
        case BREAK:
          return "break";
        case CASE:
          return "case";
        case CHAR:
          return "char";
        case CONST:
          return "const";
        case CONTINUE:
          return "continue";
        case DEFAULT:
          return "default";
        case DO:
          return "do";
        case DOUBLE:
          return "double";
        case ELSE:
          return "else";
        case ENUM:
          return "enum";
        case EXTERN:
          return "extern";
        case FLOAT:
          return "float";
        case FOR:
          return "for";
        case GOTO:
          return "goto";
        case IF:
          return "if";
        case INT:
          return "int";
        case LONG:
          return "long";
        case REGISTER:
          return "register";
        case RETURN:
          return "return";
        case SHORT:
          return "short";
        case SIGNED:
          return "signed";
        case SIZEOF:
          return "sizeof";
        case STATIC:
          return "static";
        case STRUCT:
          return "struct";
        case SWITCH:
          return "switch";
        case TYPEDEF:
          return "typedef";
        case UNION:
          return "union";
        case UNSIGNED:
          return "unsigned";
        case VOID:
          return "void";
        case VOLATILE:
          return "volatile";
        case WHILE:
          return "while";
        case _BOOL:
          return "_Bool";
        case _COMPLEX:
          return "_Complex";
        case INLINE:
          return "inline";
        case RESTRICT:
          return "restrict";
        case __ALIGNOF:
          return "__alignof";
        case __ALIGNOF__:
          return "__alignof__";
        case ASM:
          return "asm";
        case __ASM:
          return "__asm";
        case __ASM__:
          return "__asm__";
        case __ATTRIBUTE:
          return "__attribute";
        case __ATTRIBUTE__:
          return "__attribute__";
        case __BUILTIN_OFFSETOF:
          return "__builtin_offsetof";
        case __BUILTIN_TYPES_COMPATIBLE_P:
          return "__builtin_types_compatible_p";
        case __BUILTIN_VA_ARG:
          return "__builtin_va_arg";
        case __BUILTIN_VA_LIST:
          return "__builtin_va_list";
        case __COMPLEX__:
          return "__complex__";
        case __CONST:
          return "__const";
        case __CONST__:
          return "__const__";
        case __EXTENSION__:
          return "__extension__";
        case __INLINE:
          return "__inline";
        case __INLINE__:
          return "__inline__";
        case __LABEL__:
          return "__label__";
        case __RESTRICT:
          return "__restrict";
        case __RESTRICT__:
          return "__restrict__";
        case __SIGNED:
          return "__signed";
        case __SIGNED__:
          return "__signed__";
        case __THREAD:
          return "__thread";
        case TYPEOF:
          return "typeof";
        case __TYPEOF:
          return "__typeof";
        case __TYPEOF__:
          return "__typeof__";
        case __VOLATILE:
          return "__volatile";
        case __VOLATILE__:
          return "__volatile__";
        case LPAREN:
          return "(";
        case RPAREN:
          return ")";
        case COMMA:
          return ",";
        case HASH:
          return "#";
        case DHASH:
          return "##";
        case LBRACE:
          return "{";
        case RBRACE:
          return "}";
        case LBRACK:
          return "[";
        case RBRACK:
          return "]";
        case DOT:
          return ".";
        case AND:
          return "&";
        case STAR:
          return "*";
        case PLUS:
          return "+";
        case MINUS:
          return "-";
        case NEGATE:
          return "~";
        case NOT:
          return "!";
        case DIV:
          return "/";
        case MOD:
          return "%";
        case LT:
          return "<";
        case GT:
          return ">";
        case XOR:
          return "^";
        case PIPE:
          return "|";
        case QUESTION:
          return "?";
        case COLON:
          return ":";
        case SEMICOLON:
          return ";";
        case ASSIGN:
          return "=";
        case ARROW:
          return "->";
        case ICR:
          return "++";
        case DECR:
          return "--";
        case LS:
          return "<<";
        case RS:
          return ">>";
        case LE:
          return "<=";
        case GE:
          return ">=";
        case EQ:
          return "==";
        case NE:
          return "!=";
        case ANDAND:
          return "&&";
        case OROR:
          return "||";
        case PLUSassign:
          return "+=";
        case MINUSassign:
          return "-=";
        case MULTassign:
          return "*=";
        case DIVassign:
          return "/=";
        case MODassign:
          return "%=";
        case LSassign:
          return "<<=";
        case RSassign:
          return ">>=";
        case ANDassign:
          return "&=";
        case ERassign:
          return "^=";
        case ORassign:
          return "|=";
        case ELLIPSIS:
          return "...";
        case EOF:
          return "";
      }
    }
    
    return null;
  }
  
  public static boolean isType(CSyntax syntax, sym type) {
    return syntax.isToken() && ((Token) syntax).isType(type);
  }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public CSyntax yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 91: 
          { return new Keyword(sym.SIZEOF, yyline + 1, yychar, yychar + yylength());
          }
        case 128: break;
        case 31: 
          { return new Punctuation(sym.ASM, yyline + 1, yychar, yychar + yylength());
          }
        case 129: break;
        case 27: 
          { return new Punctuation(sym.RBRACK, yyline + 1, yychar, yychar + yylength());
          }
        case 130: break;
        case 116: 
          { return new Keyword(sym.__INLINE__, yyline + 1, yychar, yychar + yylength());
          }
        case 131: break;
        case 6: 
          { return new Punctuation(sym.QUESTION, yyline + 1, yychar, yychar + yylength());
          }
        case 132: break;
        case 38: 
          { return new Literal(sym.STRINGliteral, yytext(), yyline + 1, yychar, yychar + yylength());
          }
        case 133: break;
        case 17: 
          { return new Punctuation(sym.STAR, yyline + 1, yychar, yychar + yylength());
          }
        case 134: break;
        case 125: 
          { return new Keyword(sym.__BUILTIN_VA_LIST, yyline + 1, yychar, yychar + yylength());
          }
        case 135: break;
        case 40: 
          { yybegin(COMMENT);
comment = new StringBuilder();
comment.append(yytext());
commentnl = false;
          }
        case 136: break;
        case 123: 
          { return new Keyword(sym.__EXTENSION__, yyline + 1, yychar, yychar + yylength());
          }
        case 137: break;
        case 104: 
          { return new Keyword(sym.__THREAD, yyline + 1, yychar, yychar + yylength());
          }
        case 138: break;
        case 87: 
          { return new Keyword(sym.EXTERN, yyline + 1, yychar, yychar + yylength());
          }
        case 139: break;
        case 75: 
          { return new Keyword(sym.CHAR, yyline + 1, yychar, yychar + yylength());
          }
        case 140: break;
        case 107: 
          { return new Keyword(sym.__INLINE, yyline + 1, yychar, yychar + yylength());
          }
        case 141: break;
        case 59: 
          { return new Punctuation(sym.DHASH, yyline + 1, yychar, yychar + yylength());
          }
        case 142: break;
        case 43: 
          { return new Punctuation(sym.DECR, yyline + 1, yychar, yychar + yylength());
          }
        case 143: break;
        case 124: 
          { return new Keyword(sym.__BUILTIN_VA_ARG, yyline + 1, yychar, yychar + yylength());
          }
        case 144: break;
        case 3: 
          { return new Punctuation(sym.PLUS, yyline + 1, yychar, yychar + yylength());
          }
        case 145: break;
        case 45: 
          { return new Punctuation(sym.MINUSassign, yyline + 1, yychar, yychar + yylength());
          }
        case 146: break;
        case 98: 
          { return new Keyword(sym.__CONST, yyline + 1, yychar, yychar + yylength());
          }
        case 147: break;
        case 83: 
          { return new Keyword(sym.__ASM, yyline + 1, yychar, yychar + yylength());
          }
        case 148: break;
        case 55: 
          { return new Punctuation(sym.OROR, yyline + 1, yychar, yychar + yylength());
          }
        case 149: break;
        case 117: 
          { return new Keyword(sym.__ALIGNOF__, yyline + 1, yychar, yychar + yylength());
          }
        case 150: break;
        case 9: 
          { return new Punctuation(sym.DIV, yyline + 1, yychar, yychar + yylength());
          }
        case 151: break;
        case 12: 
          { return new Punctuation(sym.LT, yyline + 1, yychar, yychar + yylength());
          }
        case 152: break;
        case 15: 
          { return new Punctuation(sym.AND, yyline + 1, yychar, yychar + yylength());
          }
        case 153: break;
        case 121: 
          { return new Keyword(sym.__RESTRICT__, yyline + 1, yychar, yychar + yylength());
          }
        case 154: break;
        case 8: 
          { return new Layout(yytext(), false, yyline + 1, yychar, yychar + yylength());
          }
        case 155: break;
        case 62: 
          { return new Punctuation(sym.ELLIPSIS, yyline + 1, yychar, yychar + yylength());
          }
        case 156: break;
        case 57: 
          { return new Punctuation(sym.MODassign, yyline + 1, yychar, yychar + yylength());
          }
        case 157: break;
        case 64: 
          { return new Literal(sym.CHARACTERconstant, yytext(), yyline + 1, yychar, yychar + yylength());
          }
        case 158: break;
        case 42: 
          { return new Keyword(sym.DO, yyline + 1, yychar, yychar + yylength());
          }
        case 159: break;
        case 84: 
          { return new Keyword(sym._BOOL, yyline + 1, yychar, yychar + yylength());
          }
        case 160: break;
        case 23: 
          { return new Punctuation(sym.HASH, yyline + 1, yychar, yychar + yylength());
          }
        case 161: break;
        case 47: 
          { return new Punctuation(sym.GE, yyline + 1, yychar, yychar + yylength());
          }
        case 162: break;
        case 14: 
          { return new Punctuation(sym.NOT, yyline + 1, yychar, yychar + yylength());
          }
        case 163: break;
        case 32: 
          { comment.append(yytext());
          }
        case 164: break;
        case 103: 
          { return new Keyword(sym.CONTINUE, yyline + 1, yychar, yychar + yylength());
          }
        case 165: break;
        case 34: 
          { return new Literal(sym.PPNUM, yytext(), yyline + 1, yychar, yychar + yylength());
          }
        case 166: break;
        case 53: 
          { return new Punctuation(sym.ANDAND, yyline + 1, yychar, yychar + yylength());
          }
        case 167: break;
        case 77: 
          { return new Keyword(sym.UNION, yyline + 1, yychar, yychar + yylength());
          }
        case 168: break;
        case 78: 
          { return new Keyword(sym.FLOAT, yyline + 1, yychar, yychar + yylength());
          }
        case 169: break;
        case 24: 
          { return new Punctuation(sym.LBRACE, yyline + 1, yychar, yychar + yylength());
          }
        case 170: break;
        case 127: 
          { return new Keyword(sym.__BUILTIN_TYPES_COMPATIBLE_P, yyline + 1, yychar, yychar + yylength());
          }
        case 171: break;
        case 20: 
          { return new Punctuation(sym.LPAREN, yyline + 1, yychar, yychar + yylength());
          }
        case 172: break;
        case 94: 
          { return new Keyword(sym.DOUBLE, yyline + 1, yychar, yychar + yylength());
          }
        case 173: break;
        case 7: 
          { return new Layout(yytext(), true, yyline + 1, yychar, yychar + yylength());
          }
        case 174: break;
        case 19: 
          { return new Punctuation(sym.XOR, yyline + 1, yychar, yychar + yylength());
          }
        case 175: break;
        case 66: 
          { return new Keyword(sym.INT, yyline + 1, yychar, yychar + yylength());
          }
        case 176: break;
        case 56: 
          { return new Punctuation(sym.MULTassign, yyline + 1, yychar, yychar + yylength());
          }
        case 177: break;
        case 79: 
          { return new Keyword(sym.BREAK, yyline + 1, yychar, yychar + yylength());
          }
        case 178: break;
        case 68: 
          { return new Punctuation(sym.LSassign, yyline + 1, yychar, yychar + yylength());
          }
        case 179: break;
        case 89: 
          { return new Keyword(sym.STRUCT, yyline + 1, yychar, yychar + yylength());
          }
        case 180: break;
        case 44: 
          { return new Punctuation(sym.ARROW, yyline + 1, yychar, yychar + yylength());
          }
        case 181: break;
        case 96: 
          { return new Keyword(sym.DEFAULT, yyline + 1, yychar, yychar + yylength());
          }
        case 182: break;
        case 52: 
          { return new Punctuation(sym.ANDassign, yyline + 1, yychar, yychar + yylength());
          }
        case 183: break;
        case 48: 
          { return new Punctuation(sym.LS, yyline + 1, yychar, yychar + yylength());
          }
        case 184: break;
        case 26: 
          { return new Punctuation(sym.LBRACK, yyline + 1, yychar, yychar + yylength());
          }
        case 185: break;
        case 109: 
          { return new Keyword(sym.__LABEL__, yyline + 1, yychar, yychar + yylength());
          }
        case 186: break;
        case 41: 
          { return new Keyword(sym.IF, yyline + 1, yychar, yychar + yylength());
          }
        case 187: break;
        case 18: 
          { return new Punctuation(sym.MOD, yyline + 1, yychar, yychar + yylength());
          }
        case 188: break;
        case 50: 
          { return new Punctuation(sym.EQ, yyline + 1, yychar, yychar + yylength());
          }
        case 189: break;
        case 101: 
          { return new Keyword(sym.RESTRICT, yyline + 1, yychar, yychar + yylength());
          }
        case 190: break;
        case 2: 
          { return new Literal(sym.OCTALconstant, yytext(), yyline + 1, yychar, yychar + yylength());
          }
        case 191: break;
        case 108: 
          { return new Keyword(sym._COMPLEX, yyline + 1, yychar, yychar + yylength());
          }
        case 192: break;
        case 22: 
          { return new Punctuation(sym.COMMA, yyline + 1, yychar, yychar + yylength());
          }
        case 193: break;
        case 13: 
          { return new Punctuation(sym.ASSIGN, yyline + 1, yychar, yychar + yylength());
          }
        case 194: break;
        case 63: 
          { return new Keyword(sym.FOR, yyline + 1, yychar, yychar + yylength());
          }
        case 195: break;
        case 46: 
          { return new Punctuation(sym.RS, yyline + 1, yychar, yychar + yylength());
          }
        case 196: break;
        case 74: 
          { return new Keyword(sym.CASE, yyline + 1, yychar, yychar + yylength());
          }
        case 197: break;
        case 86: 
          { return new Keyword(sym.RETURN, yyline + 1, yychar, yychar + yylength());
          }
        case 198: break;
        case 36: 
          { return new Punctuation(sym.ICR, yyline + 1, yychar, yychar + yylength());
          }
        case 199: break;
        case 90: 
          { return new Keyword(sym.SIGNED, yyline + 1, yychar, yychar + yylength());
          }
        case 200: break;
        case 100: 
          { return new Keyword(sym.VOLATILE, yyline + 1, yychar, yychar + yylength());
          }
        case 201: break;
        case 5: 
          { return new Literal(sym.INTEGERconstant, yytext(), yyline + 1, yychar, yychar + yylength());
          }
        case 202: break;
        case 11: 
          { return new Punctuation(sym.GT, yyline + 1, yychar, yychar + yylength());
          }
        case 203: break;
        case 80: 
          { return new Keyword(sym.CONST, yyline + 1, yychar, yychar + yylength());
          }
        case 204: break;
        case 1: 
          { return new Identifier(sym.IDENTIFIER, yytext(), yyline + 1, yychar, yychar + yylength());
          }
        case 205: break;
        case 60: 
          { comment.append(yytext()); yybegin(YYINITIAL);
return new Layout(comment.toString(), false, yyline + 1, yychar, yychar + yylength());
          }
        case 206: break;
        case 88: 
          { return new Keyword(sym.STATIC, yyline + 1, yychar, yychar + yylength());
          }
        case 207: break;
        case 28: 
          { return new Punctuation(sym.NEGATE, yyline + 1, yychar, yychar + yylength());
          }
        case 208: break;
        case 97: 
          { return new Keyword(sym.__ASM__, yyline + 1, yychar, yychar + yylength());
          }
        case 209: break;
        case 71: 
          { return new Keyword(sym.AUTO, yyline + 1, yychar, yychar + yylength());
          }
        case 210: break;
        case 85: 
          { return new Keyword(sym.TYPEOF, yyline + 1, yychar, yychar + yylength());
          }
        case 211: break;
        case 35: 
          { return new Literal(sym.FLOATINGconstant, yytext(), yyline + 1, yychar, yychar + yylength());
          }
        case 212: break;
        case 119: 
          { return new Keyword(sym.__COMPLEX__, yyline + 1, yychar, yychar + yylength());
          }
        case 213: break;
        case 82: 
          { return new Keyword(sym.WHILE, yyline + 1, yychar, yychar + yylength());
          }
        case 214: break;
        case 93: 
          { return new Keyword(sym.INLINE, yyline + 1, yychar, yychar + yylength());
          }
        case 215: break;
        case 70: 
          { return new Keyword(sym.VOID, yyline + 1, yychar, yychar + yylength());
          }
        case 216: break;
        case 54: 
          { return new Punctuation(sym.ORassign, yyline + 1, yychar, yychar + yylength());
          }
        case 217: break;
        case 122: 
          { return new Keyword(sym.__ATTRIBUTE__, yyline + 1, yychar, yychar + yylength());
          }
        case 218: break;
        case 76: 
          { return new Keyword(sym.GOTO, yyline + 1, yychar, yychar + yylength());
          }
        case 219: break;
        case 118: 
          { return new Keyword(sym.__ATTRIBUTE, yyline + 1, yychar, yychar + yylength());
          }
        case 220: break;
        case 110: 
          { return new Keyword(sym.__ALIGNOF, yyline + 1, yychar, yychar + yylength());
          }
        case 221: break;
        case 30: 
          { return new Punctuation(sym.SEMICOLON, yyline + 1, yychar, yychar + yylength());
          }
        case 222: break;
        case 49: 
          { return new Punctuation(sym.LE, yyline + 1, yychar, yychar + yylength());
          }
        case 223: break;
        case 37: 
          { return new Punctuation(sym.PLUSassign, yyline + 1, yychar, yychar + yylength());
          }
        case 224: break;
        case 114: 
          { return new Keyword(sym.__RESTRICT, yyline + 1, yychar, yychar + yylength());
          }
        case 225: break;
        case 92: 
          { return new Keyword(sym.SWITCH, yyline + 1, yychar, yychar + yylength());
          }
        case 226: break;
        case 4: 
          { return new Punctuation(sym.DOT, yyline + 1, yychar, yychar + yylength());
          }
        case 227: break;
        case 51: 
          { return new Punctuation(sym.NE, yyline + 1, yychar, yychar + yylength());
          }
        case 228: break;
        case 112: 
          { return new Keyword(sym.__VOLATILE, yyline + 1, yychar, yychar + yylength());
          }
        case 229: break;
        case 58: 
          { return new Punctuation(sym.ERassign, yyline + 1, yychar, yychar + yylength());
          }
        case 230: break;
        case 25: 
          { return new Punctuation(sym.RBRACE, yyline + 1, yychar, yychar + yylength());
          }
        case 231: break;
        case 102: 
          { return new Keyword(sym.REGISTER, yyline + 1, yychar, yychar + yylength());
          }
        case 232: break;
        case 65: 
          { return new Keyword(sym.ASM, yyline + 1, yychar, yychar + yylength());
          }
        case 233: break;
        case 115: 
          { return new Keyword(sym.__SIGNED__, yyline + 1, yychar, yychar + yylength());
          }
        case 234: break;
        case 99: 
          { return new Keyword(sym.UNSIGNED, yyline + 1, yychar, yychar + yylength());
          }
        case 235: break;
        case 67: 
          { return new Punctuation(sym.RSassign, yyline + 1, yychar, yychar + yylength());
          }
        case 236: break;
        case 113: 
          { return new Keyword(sym.__TYPEOF__, yyline + 1, yychar, yychar + yylength());
          }
        case 237: break;
        case 39: 
          { return new Punctuation(sym.DIVassign, yyline + 1, yychar, yychar + yylength());
          }
        case 238: break;
        case 61: 
          { return new Literal(sym.HEXconstant, yytext(), yyline + 1, yychar, yychar + yylength());
          }
        case 239: break;
        case 126: 
          { return new Keyword(sym.__BUILTIN_OFFSETOF, yyline + 1, yychar, yychar + yylength());
          }
        case 240: break;
        case 120: 
          { return new Keyword(sym.__VOLATILE__, yyline + 1, yychar, yychar + yylength());
          }
        case 241: break;
        case 95: 
          { return new Keyword(sym.TYPEDEF, yyline + 1, yychar, yychar + yylength());
          }
        case 242: break;
        case 73: 
          { return new Keyword(sym.ENUM, yyline + 1, yychar, yychar + yylength());
          }
        case 243: break;
        case 21: 
          { return new Punctuation(sym.RPAREN, yyline + 1, yychar, yychar + yylength());
          }
        case 244: break;
        case 69: 
          { return new Keyword(sym.LONG, yyline + 1, yychar, yychar + yylength());
          }
        case 245: break;
        case 29: 
          { return new Punctuation(sym.COLON, yyline + 1, yychar, yychar + yylength());
          }
        case 246: break;
        case 105: 
          { return new Keyword(sym.__TYPEOF, yyline + 1, yychar, yychar + yylength());
          }
        case 247: break;
        case 10: 
          { return new Punctuation(sym.MINUS, yyline + 1, yychar, yychar + yylength());
          }
        case 248: break;
        case 16: 
          { return new Punctuation(sym.PIPE, yyline + 1, yychar, yychar + yylength());
          }
        case 249: break;
        case 33: 
          { comment.append(yytext()); commentnl = true;
          }
        case 250: break;
        case 106: 
          { return new Keyword(sym.__SIGNED, yyline + 1, yychar, yychar + yylength());
          }
        case 251: break;
        case 81: 
          { return new Keyword(sym.SHORT, yyline + 1, yychar, yychar + yylength());
          }
        case 252: break;
        case 111: 
          { return new Keyword(sym.__CONST__, yyline + 1, yychar, yychar + yylength());
          }
        case 253: break;
        case 72: 
          { return new Keyword(sym.ELSE, yyline + 1, yychar, yychar + yylength());
          }
        case 254: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   return new Token(sym.EOF, yyline + 1, yychar, yychar + yylength());
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
